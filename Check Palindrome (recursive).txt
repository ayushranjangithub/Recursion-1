Check Palindrome (recursive)
Send Feedback
Check whether a given String 'S' is a palindrome using recursion.


Return true or false.


Note:
You don’t need to print anything. Just implement the given function.
Example:
Input: s = "racecar"
Output: true
Explanation: "racecar" is a palindrome.
Input Format:
The first and only line of the input contains string S.
Output format:
Return a boolean value True or False.
Sample Input 1:
abbba
Sample Output 1:
true
Explanation Of Sample Input 1 :
“abbba” is a palindrome


bool isPalRec(char str[],  int s, int e) 
{ 
    
    if (s == e) 
    return true; 
  
   
    if (str[s] != str[e]) 
    return false; 
  
   
    if (s <=e){  // if(s<e+1) both are same
    //return isPalRec(str, s + 1, e - 1);
      bool ans =  isPalRec(str , s+1 , e-1);
      return ans;
    }
    //return true;
} 

bool checkPalindrome(char input[]) {
      
    // An empty string is   considered as palindrome 
   // if (n == 0) 
       // return true; 
      int n = 0;
      for(int i = 0; input[i] != '\0' ; ++i)
      {
          n++;//size of char array
      }
    return isPalRec(input, 0,  n-1); 
}


// Main Code:

#include <algorithm>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iostream>
#include <string>
#include <utility>
#include <vector>
#include <stack>
using namespace std;
#include "solution.h"

class Runner
{
    string t;

public:
    void takeInput()
    {
        cin>>t;
    }

    void execute()
    {
        auto ans = isPalindrome(t);
    }

    void executeAndPrintOutput()
    {
        auto ans = isPalindrome(t);
        ans ? cout<<"true" : cout<<"false";
    }
};

int main()
{
    // for (int i = 1; i <= 50; i++)
    // {
    //     string filename1 = "./Testcases/large/in/input" + to_string(i) + ".txt";
    //     string filename2 = "./Testcases/large/out/output" + to_string(i) + ".txt";
        
    //     ifstream inputFile(filename1);
    //     ofstream outputFile(filename2);
        
    //     if (inputFile.is_open() && outputFile.is_open())
    //     {
    //         cin.rdbuf(inputFile.rdbuf());   // Redirect cin to input file
    //         cout.rdbuf(outputFile.rdbuf()); // Redirect cout to output file
            
    //         Runner runner;
    //         runner.takeInput();
    //         runner.executeAndPrintOutput();
            
    //         cin.rdbuf(nullptr);   // Reset cin to standard input
    //         cout.rdbuf(nullptr);  // Reset cout to standard output
            
    //         inputFile.close();
    //         outputFile.close();
    //     }
    //     else
    //     {
    //         cerr << "Failed to open input or output file." << endl;
    //     }
    // }
    Runner runner;
    runner.takeInput();
    runner.executeAndPrintOutput();
    return 0;
}